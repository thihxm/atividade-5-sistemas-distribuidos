// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: hotel-chain.proto

package hotel_chain

import (
	context "context"
	base "github.com/thihxm/hotel-chain/protos/base"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HotelService_BookHotel_FullMethodName     = "/atividade5.hotelchain.HotelService/BookHotel"
	HotelService_RevertBooking_FullMethodName = "/atividade5.hotelchain.HotelService/RevertBooking"
)

// HotelServiceClient is the client API for HotelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HotelServiceClient interface {
	BookHotel(ctx context.Context, in *base.CreateReservationRequest, opts ...grpc.CallOption) (*base.CreateReservationResponse, error)
	RevertBooking(ctx context.Context, in *base.RevertBookingRequest, opts ...grpc.CallOption) (*base.RevertBookingResponse, error)
}

type hotelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHotelServiceClient(cc grpc.ClientConnInterface) HotelServiceClient {
	return &hotelServiceClient{cc}
}

func (c *hotelServiceClient) BookHotel(ctx context.Context, in *base.CreateReservationRequest, opts ...grpc.CallOption) (*base.CreateReservationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(base.CreateReservationResponse)
	err := c.cc.Invoke(ctx, HotelService_BookHotel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) RevertBooking(ctx context.Context, in *base.RevertBookingRequest, opts ...grpc.CallOption) (*base.RevertBookingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(base.RevertBookingResponse)
	err := c.cc.Invoke(ctx, HotelService_RevertBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HotelServiceServer is the server API for HotelService service.
// All implementations must embed UnimplementedHotelServiceServer
// for forward compatibility.
type HotelServiceServer interface {
	BookHotel(context.Context, *base.CreateReservationRequest) (*base.CreateReservationResponse, error)
	RevertBooking(context.Context, *base.RevertBookingRequest) (*base.RevertBookingResponse, error)
	mustEmbedUnimplementedHotelServiceServer()
}

// UnimplementedHotelServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHotelServiceServer struct{}

func (UnimplementedHotelServiceServer) BookHotel(context.Context, *base.CreateReservationRequest) (*base.CreateReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookHotel not implemented")
}
func (UnimplementedHotelServiceServer) RevertBooking(context.Context, *base.RevertBookingRequest) (*base.RevertBookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevertBooking not implemented")
}
func (UnimplementedHotelServiceServer) mustEmbedUnimplementedHotelServiceServer() {}
func (UnimplementedHotelServiceServer) testEmbeddedByValue()                      {}

// UnsafeHotelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HotelServiceServer will
// result in compilation errors.
type UnsafeHotelServiceServer interface {
	mustEmbedUnimplementedHotelServiceServer()
}

func RegisterHotelServiceServer(s grpc.ServiceRegistrar, srv HotelServiceServer) {
	// If the following call pancis, it indicates UnimplementedHotelServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HotelService_ServiceDesc, srv)
}

func _HotelService_BookHotel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(base.CreateReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).BookHotel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_BookHotel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).BookHotel(ctx, req.(*base.CreateReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_RevertBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(base.RevertBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).RevertBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_RevertBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).RevertBooking(ctx, req.(*base.RevertBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HotelService_ServiceDesc is the grpc.ServiceDesc for HotelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HotelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "atividade5.hotelchain.HotelService",
	HandlerType: (*HotelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BookHotel",
			Handler:    _HotelService_BookHotel_Handler,
		},
		{
			MethodName: "RevertBooking",
			Handler:    _HotelService_RevertBooking_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hotel-chain.proto",
}
