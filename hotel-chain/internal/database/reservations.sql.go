// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: reservations.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createReservation = `-- name: CreateReservation :one
INSERT INTO reservations (id, room_id, start_date, end_date)
VALUES (?, ?, ?, ?)
RETURNING id, room_id, start_date, end_date
`

type CreateReservationParams struct {
	ID        string
	RoomID    string
	StartDate time.Time
	EndDate   sql.NullTime
}

func (q *Queries) CreateReservation(ctx context.Context, arg CreateReservationParams) (Reservation, error) {
	row := q.db.QueryRowContext(ctx, createReservation,
		arg.ID,
		arg.RoomID,
		arg.StartDate,
		arg.EndDate,
	)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const deleteReservation = `-- name: DeleteReservation :exec
DELETE FROM reservations
WHERE id = ?
`

func (q *Queries) DeleteReservation(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteReservation, id)
	return err
}

const getReservation = `-- name: GetReservation :one
SELECT id, room_id, start_date, end_date FROM reservations
WHERE id = ?
`

func (q *Queries) GetReservation(ctx context.Context, id string) (Reservation, error) {
	row := q.db.QueryRowContext(ctx, getReservation, id)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const resetReservations = `-- name: ResetReservations :exec
DELETE FROM reservations
`

func (q *Queries) ResetReservations(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetReservations)
	return err
}
