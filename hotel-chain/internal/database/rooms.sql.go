// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: rooms.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createRoom = `-- name: CreateRoom :exec
INSERT INTO rooms (id, name, location, max_people, price)
VALUES (?, ?, ?, ?, ?)
`

type CreateRoomParams struct {
	ID        string
	Name      string
	Location  string
	MaxPeople int64
	Price     int64
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) error {
	_, err := q.db.ExecContext(ctx, createRoom,
		arg.ID,
		arg.Name,
		arg.Location,
		arg.MaxPeople,
		arg.Price,
	)
	return err
}

const getFirstAvailableRoom = `-- name: GetFirstAvailableRoom :one
SELECT id, name, location, max_people, price FROM rooms
WHERE location = ? 
AND max_people >= ? 
AND id NOT IN (
    SELECT room_id FROM reservations
    WHERE start_date <= ? AND end_date >= ?
)
LIMIT 1
`

type GetFirstAvailableRoomParams struct {
	Location  string
	MaxPeople int64
	StartDate time.Time
	EndDate   sql.NullTime
}

func (q *Queries) GetFirstAvailableRoom(ctx context.Context, arg GetFirstAvailableRoomParams) (Room, error) {
	row := q.db.QueryRowContext(ctx, getFirstAvailableRoom,
		arg.Location,
		arg.MaxPeople,
		arg.StartDate,
		arg.EndDate,
	)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.MaxPeople,
		&i.Price,
	)
	return i, err
}

const resetRooms = `-- name: ResetRooms :exec
DELETE FROM rooms
`

func (q *Queries) ResetRooms(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetRooms)
	return err
}
