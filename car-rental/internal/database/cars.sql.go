// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cars.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createCar = `-- name: CreateCar :exec
INSERT INTO cars (id, brand, model, seats, price, location)
VALUES (?, ?, ?, ?, ?, ?)
`

type CreateCarParams struct {
	ID       string
	Brand    string
	Model    string
	Seats    int64
	Price    int64
	Location string
}

func (q *Queries) CreateCar(ctx context.Context, arg CreateCarParams) error {
	_, err := q.db.ExecContext(ctx, createCar,
		arg.ID,
		arg.Brand,
		arg.Model,
		arg.Seats,
		arg.Price,
		arg.Location,
	)
	return err
}

const getFirstAvailableCar = `-- name: GetFirstAvailableCar :one
SELECT id, brand, model, seats, price, location FROM cars
WHERE location = ? 
AND seats >= ? 
AND id NOT IN (
    SELECT car_id FROM reservations
    WHERE start_date <= ? AND end_date >= ?
)
LIMIT 1
`

type GetFirstAvailableCarParams struct {
	Location  string
	Seats     int64
	StartDate time.Time
	EndDate   sql.NullTime
}

func (q *Queries) GetFirstAvailableCar(ctx context.Context, arg GetFirstAvailableCarParams) (Car, error) {
	row := q.db.QueryRowContext(ctx, getFirstAvailableCar,
		arg.Location,
		arg.Seats,
		arg.StartDate,
		arg.EndDate,
	)
	var i Car
	err := row.Scan(
		&i.ID,
		&i.Brand,
		&i.Model,
		&i.Seats,
		&i.Price,
		&i.Location,
	)
	return i, err
}

const resetCars = `-- name: ResetCars :exec
DELETE FROM cars
`

func (q *Queries) ResetCars(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetCars)
	return err
}
